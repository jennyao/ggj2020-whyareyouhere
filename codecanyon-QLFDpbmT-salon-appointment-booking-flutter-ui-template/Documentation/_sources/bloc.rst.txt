===================
BLoC Design Pattern
===================

**BLoC** stands for Business Logic Components. It helps us to:

- separate presentation from business logic.
- know what state our application is in at any point in time.
- record every single user interaction in our application so that we can make data-driven decisions.
- work as efficiently as possible and reuse components both within our application and across other applications.

and many more.

BLoCs receive `events` and convert the incoming `events` into outgoing `states`.

.. note::
    To learn more about BLoC pattern visit `bloclibrary.dev <https://bloclibrary.dev/#/gettingstarted>`_.

Setup
=====

BLoC consists of two pub packages added to ``pubspec.yaml``:

- `bloc <https://pub.dev/packages/bloc>`_ - Core bloc library
- `flutter_bloc <https://pub.dev/packages/flutter_bloc>`_ - Powerful Flutter Widgets built to work with bloc in order to build fast, reactive mobile applications.

.. code-block:: yaml

    dependencies:
        bloc: ^6.0.3
        flutter_bloc: ^6.0.5


Bloc Widgets
============

BlocBuilder
-----------

``BlocBuilder`` is a Flutter widget which requires a cubit and a builder function. ``BlocBuilder`` handles building the widget in response to new states.
The ``builder`` function will potentially be called many times and should be a pure function that returns a widget in response to the state.

.. code-block:: dart

    return BlocBuilder<CitiesBloc, CitiesState>(
        builder: (BuildContext context, CitiesState state) {
            if (state is RefreshSuccessCitiesState) {
                _cities = state.cities;
            }
            return LoadingOverlay(
                isLoading: state is LoadInProgressCitiesState,
                child: _buildList(context),
            );
        },
    );

For fine-grained control over when the builder function is called an optional ``buildWhen`` can be provided. ``buildWhen`` takes the previous cubit state and current cubit state and returns a boolean. If ``buildWhen`` returns true, builder will be called with state and the widget will rebuild. If ``buildWhen`` returns false, builder will not be called with state and no rebuild will occur.

.. code-block:: dart

    return BlocBuilder<AuthBloc, AuthState>(
        buildWhen: (AuthState previousState, AuthState currentState) {
            return currentState is PreferenceSaveSuccessAuthState;
        },
        builder: (BuildContext context, AuthState state) {
            ...
        },
    );

BlocProvider
------------

``BlocProvider`` is a Flutter widget which provides a cubit to its children via ``BlocProvider.of<T>(context)``.
It is used as a dependency injection (DI) widget so that a single instance of a cubit can be provided to multiple widgets within a subtree.

.. code-block:: dart

    BlocProvider.of<FavoritesBloc>(context).add(DataLoadedFavoritesEvent());


MultiBlocProvider
-----------------

``MultiBlocProvider`` is a Flutter widget that merges multiple ``BlocProvider`` widgets into one. 
``MultiBlocProvider`` improves the readability and eliminates the need to nest multiple ``BlocProviders``. 

.. code-block:: dart

    return MultiBlocProvider(
        providers: <BlocProvider<dynamic>>[
            BlocProvider<ApplicationBloc>(create: (BuildContext context) => _applicationBloc),
            BlocProvider<AuthBloc>(create: (BuildContext context) => _authBloc),
            BlocProvider<SearchBloc>(create: (BuildContext context) => _searchBloc),
            BlocProvider<CitiesBloc>(create: (BuildContext context) => _citiesBloc),
            BlocProvider<LanguageBloc>(create: (BuildContext context) => _languageBloc),
            BlocProvider<ThemeBloc>(create: (BuildContext context) => _themeBloc),
            BlocProvider<AppointmentBloc>(create: (BuildContext context) => _appointmentBloc),
            BlocProvider<FavoritesBloc>(create: (BuildContext context) => _favoritesBloc),
            BlocProvider<LoyaltyBloc>(create: (BuildContext context) => _loyaltyBloc),
            BlocProvider<BookingBloc>(create: (BuildContext context) => _bookingBloc),
            BlocProvider<RatingsBloc>(create: (BuildContext context) => _ratingsBloc),
            BlocProvider<ChatBloc>(create: (BuildContext context) => _chatBloc),
      ],
      child: ...
    );

BlocListener
------------

``BlocListener`` is a Flutter widget which invokes the ``listener`` in response to state changes in the cubit. 
It should be used for functionality that needs to occur once per state change such as navigation, showing a ``SnackBar``, showing a ``Dialog``, etc...

``listener`` is only called once for each state change (NOT including the initial state) unlike builder in ``BlocBuilder`` and is a void function.

.. code-block:: dart

    return BlocListener<LoyaltyBloc, LoyaltyState>(
        listener: (BuildContext context, LoyaltyState state) {
            if (state is VoucherLoadSuccessLoyaltyState) {
                setState(() => _voucher = state.voucher);
            }
        },
        child: SafeArea(
            child: SingleChildScrollView(
                child: Column(
                    children: <Widget>[
                        VoucherInfo(voucher: _voucher),
                    ],
                ),
            ),
        ),
    );